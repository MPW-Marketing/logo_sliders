<?php
function setup_slider_types () {
	create_slider_type();
}

function create_slider_type() {
  register_post_type( 'logo_slider',
    array(
      'labels' => array(
        'name' => __( 'Logo Slide' ),
        'singular_name' => __( 'Logo Slide' ),
        'add_new'           => __( 'Add New Logo Slide' ),
        'add_new_item'      => __( 'Add New Logo Slide' ),
        'edit_item'         => __( 'Edit Logo Slide' ),
        'new_item'          => __( 'New Logo Slide' ),
        'view_item'         => __( 'View Logo Slide' ),
        'search_items'      => __( 'Search LogoSlides' ),
        'not_found'         => __( 'Logo Slide' ),
        'not_found_in_trash'=> __( 'Logo Slide' ),
        'parent_item_colon' => __( 'Logo Slide' ),
        'menu_name'         => __( 'Logo Slides' )
      ),
      'public' => true,
		'supports'              => array( 'title', 'editor', 'excerpt', 'thumbnail', 'revisions', 'custom-fields', 'page-attributes', ),
		'taxonomies'            => array( 'category', 'post_tag', 'slider_group' ),
		'has_archive'       => false,
        'hierarchical'      => false,
        'rewrite'           => array( 'slug' => 'logos', 'with_front' => false ),
    )
  );
}



/**
/* Set up taxonamy to filter sliders
*/
// Register Custom Taxonomy
function slider_taxonomy() {

	$labels = array(
		'name'                       => _x( 'Logo Slider Groups', 'Taxonomy General Name', 'mv_edge' ),
		'singular_name'              => _x( 'Logo Slider Group', 'Taxonomy Singular Name', 'mv_edge' ),
		'menu_name'                  => __( 'Logo Slider Groups', 'logo_slider' ),
		'all_items'                  => __( 'All Logo Slider Groups', 'logo_slider' ),
		'parent_item'                => __( 'Parent Logo Slider Group', 'logo_slider' ),
		'parent_item_colon'          => __( 'Parent Logo Slider Groups:', 'logo_slider' ),
		'new_item_name'              => __( 'New Logo Slider Group', 'logo_slider' ),
		'add_new_item'               => __( 'Add Logo Slider Group', 'logo_slider' ),
		'edit_item'                  => __( 'Edit Logo Slider Group', 'logo_slider' ),
		'update_item'                => __( 'Update Logo Slider Group', 'logo_slider' ),
		'view_item'                  => __( 'View Logo Slider Group', 'logo_slider' ),
		'separate_items_with_commas' => __( 'Separate items with commas', 'logo_slider' ),
		'add_or_remove_items'        => __( 'Add or remove Slider Group', 'logo_slider' ),
		'choose_from_most_used'      => __( 'Choose from the most used', 'logo_slider' ),
		'popular_items'              => __( 'Popular Logo Slider Groups', 'logo_slider' ),
		'search_items'               => __( 'Search Logo Slider Groups', 'logo_slider' ),
		'not_found'                  => __( 'Not Found', 'logo_slider' ),
		'no_terms'                   => __( 'No items', 'logo_slider' ),
		'items_list'                 => __( 'Items list', 'logo_slider' ),
		'items_list_navigation'      => __( 'Items list navigation', 'logo_slider' ),
	);
	$rewrite = array(
		'slug'                       => 'slider_groups',
		'with_front'                 => true,
		'hierarchical'               => false,
	);
	$args = array(
		'labels'                     => $labels,
		'hierarchical'               => true,
		'public'                     =>false,
		'show_ui'                    => true,
		'show_admin_column'          => true,
		'show_in_nav_menus'          => false,
		'show_tagcloud'              => false,
		'rewrite'                    => false,
	);
	register_taxonomy( 'slider_group', array( 'logo_slider' ), $args );

}
add_action( 'init', 'slider_taxonomy', 0 );
/**
 * Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
 */
class Slider_Rational_Meta_Box {
	private $screens = array(
		'logo_slider','text_sliders',
	);
	private $fields = array(
		array(
			'id' => 'slider-link',
			'label' => 'Slider Link',
			'type' => 'text',
		),
	);

	/**
	 * Class construct method. Adds actions to their respective WordPress hooks.
	 */
	public function __construct() {
		add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
		add_action( 'save_post', array( $this, 'save_post' ) );
	}

	/**
	 * Hooks into WordPress' add_meta_boxes function.
	 * Goes through screens (post types) and adds the meta box.
	 */
	public function add_meta_boxes() {
		foreach ( $this->screens as $screen ) {
			add_meta_box(
				'advanced-options',
				__( 'Advanced Options', 'logo_slider' ),
				array( $this, 'add_meta_box_callback' ),
				$screen,
				'advanced',
				'default'
			);
		}
	}

	/**
	 * Generates the HTML for the meta box
	 * 
	 * @param object $post WordPress post object
	 */
	public function add_meta_box_callback( $post ) {
		wp_nonce_field( 'advanced_options_data', 'advanced_options_nonce' );
		$this->generate_fields( $post );
	}

	/**
	 * Generates the field's HTML for the meta box.
	 */
	public function generate_fields( $post ) {
		$output = '';
		foreach ( $this->fields as $field ) {
			$label = '<label for="' . $field['id'] . '">' . $field['label'] . '</label>';
			$db_value = get_post_meta( $post->ID, 'advanced_options_' . $field['id'], true );
			switch ( $field['type'] ) {
				default:
					$input = sprintf(
						'<input %s id="%s" name="%s" type="%s" value="%s">',
						$field['type'] !== 'color' ? 'class="regular-text"' : '',
						$field['id'],
						$field['id'],
						$field['type'],
						$db_value
					);
			}
			$output .= $this->row_format( $label, $input );
		}
		echo '<table class="form-table"><tbody>' . $output . '</tbody></table>';
	}

	/**
	 * Generates the HTML for table rows.
	 */
	public function row_format( $label, $input ) {
		return sprintf(
			'<tr><th scope="row">%s</th><td>%s</td></tr>',
			$label,
			$input
		);
	}
	/**
	 * Hooks into WordPress' save_post function
	 */
	public function save_post( $post_id ) {
		if ( ! isset( $_POST['advanced_options_nonce'] ) )
			return $post_id;

		$nonce = $_POST['advanced_options_nonce'];
		if ( !wp_verify_nonce( $nonce, 'advanced_options_data' ) )
			return $post_id;

		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
			return $post_id;

		foreach ( $this->fields as $field ) {
			if ( isset( $_POST[ $field['id'] ] ) ) {
				switch ( $field['type'] ) {
					case 'email':
						$_POST[ $field['id'] ] = sanitize_email( $_POST[ $field['id'] ] );
						break;
					case 'text':
						$_POST[ $field['id'] ] = sanitize_text_field( $_POST[ $field['id'] ] );
						break;
				}
				update_post_meta( $post_id, 'advanced_options_' . $field['id'], $_POST[ $field['id'] ] );
			} else if ( $field['type'] === 'checkbox' ) {
				update_post_meta( $post_id, 'advanced_options_' . $field['id'], '0' );
			}
		}
	}
}
new Slider_Rational_Meta_Box;